" Colour management
set t_Co=256
set background=dark
colorscheme darkness

" Plugin options
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:gitgutter_override_sign_column_highlight = 0
let g:syntastic_yaml_checkers = ['yamllint']

let mapleader = ","

" For gitgutter
set updatetime=500

" Formatting options
set expandtab
set sw=4
set ts=4

auto Filetype go   setlocal ts=4 sw=4 noexpandtab
auto Filetype ruby setlocal ts=2 sw=2 expandtab
auto Filetype yaml setlocal ts=2 sw=2 expandtab

" Buffer movement
nmap <C-q>  :bnext!<CR>
imap <C-q>  <ESC>:bnext!<CR>
nmap <C-a>  :bprevious!<CR>
imap <C-a>  <ESC>:bprevious!<CR>
nmap <C-s>q :bprevious<CR>:bdelete #<CR>
nmap <C-s>x :bprevious!<CR>:bdelete! #<CR>

" Window movement
nmap <C-e>  :wincmd w<CR>
imap <C-e>  <ESC>:wincmd w<CR>

" NERDTree
nmap <C-n>  :NERDTreeToggle<CR>
imap <C-n>  <ESC>:NERDTreeToggle<CR>

" gitgutter
nmap <C-g>  :GitGutterLineHighlightsToggle<CR>
imap <C-g>  <ESC>:GitGutterLineHighlightsToggle<CR>
nmap ga     <Plug>GitGutterStageHunk
nmap gu     <Plug>GitGutterUndoHunk
nmap gv     <Plug>GitGutterPreviewHunk
nmap gn     <Plug>GitGutterNextHunk
nmap gp     <Plug>GitGutterPrevHunk

" Helper to determine syntax highlighting
nmap zz     :echo synIDattr(synID(line("."), col("."), 1), "name")<CR>

" Close nerdtree when its the last remaining window
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Automatically open nerdtree when no files are specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

execute pathogen#infect()
