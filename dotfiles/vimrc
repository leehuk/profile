function! MyHighlights() abort
    highlight Normal                    ctermfg=grey ctermbg=black
    highlight Folded                    ctermfg=darkgrey ctermbg=black
    highlight SignColumn                term=standout ctermfg=14 ctermbg=black

    highlight DiffAdd                   term=bold cterm=bold ctermfg=darkgreen ctermbg=black
    highlight DiffChange                term=bold cterm=bold ctermfg=darkgray ctermbg=black
    highlight DiffDelete                term=bold cterm=bold ctermfg=darkred ctermbg=black

    highlight GitGutterAdd              term=bold cterm=bold ctermfg=white ctermbg=darkgreen
    highlight GitGutterChange           term=bold cterm=bold ctermfg=white ctermbg=darkgray
    highlight GitGutterDelete           term=bold cterm=bold ctermfg=white ctermbg=darkred
    highlight GitGutterChangeDelete     term=bold cterm=bold ctermfg=darkred ctermbg=darkgray
endfunction

augroup MyColors
    autocmd!
    autocmd ColorScheme * call MyHighlights()
augroup END

set background=dark
colorscheme slate

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'

let g:gitgutter_override_sign_column_highlight = 0

let g:syntastic_yaml_checkers = ['yamllint']

let mapleader = ","

set expandtab
set sw=4
set ts=4

" For gitgutter
set updatetime=500

auto Filetype go setlocal ts=4 sw=4 noexpandtab
auto Filetype ruby setlocal ts=2 sw=2 expandtab
auto Filetype yaml setlocal ts=2 sw=2 expandtab

nmap <C-q> :bnext!<CR>
imap <C-q> <ESC>:bnext!<CR>
nmap <C-a> :bprevious!<CR>
imap <C-a> <ESC>:bprevious!<CR>
nmap <C-s>q :bprevious<CR>:bdelete #<CR>
nmap <C-s>x :bprevious!<CR>:bdelete! #<CR>

nmap <C-e> :wincmd w<CR>
imap <C-e> <ESC>:wincmd w<CR>

nmap <C-n> :NERDTreeToggle<CR>
imap <C-n> <ESC>:NERDTreeToggle<CR>

nmap <C-g> :GitGutterLineHighlightsToggle<CR>
imap <C-g> <ESC>:GitGutterLineHighlightsToggle<CR>

nmap <Leader>ga     <Plug>GitGutterStageHunk
nmap <Leader>gv     <Plug>GitGutterPreviewHunk
nmap gn             <Plug>GitGutterNextHunk
nmap gp             <Plug>GitGutterPrevHunk

" Close nerdtree when its the last remaining window
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Automatically open nerdtree when no files are specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

execute pathogen#infect()
