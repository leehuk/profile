## Prompt
##

## Configuration
# Output Prompt Generation Timings
export PROMPT_TIMINGS=0

export ANSI_LRED="\[\033[38;5;9m\]"
export ANSI_DRED="\[\033[38;5;1m\]"
export ANSI_LGRN="\[\033[38;5;10m\]"
export ANSI_DGRN="\[\033[38;5;2m\]"
export ANSI_LYLW="\[\033[38;5;11m\]"
export ANSI_DYLW="\[\033[38;5;3m\]"
export ANSI_LBLU="\[\033[38;5;12m\]"
export ANSI_DBLU="\[\033[38;5;4m\]"
export ANSI_LPNK="\[\033[38;5;13m\]"
export ANSI_DPNK="\[\033[38;5;5m\]"
export ANSI_LCYN="\[\033[38;5;14m\]"
export ANSI_DCYN="\[\033[38;5;6m\]"
export ANSI_LGRY="\[\033[38;5;7m\]"
export ANSI_DGRY="\[\033[38;5;8m\]"
export ANSI_WHT="\[\033[38;5;15m\]"
export ANSI_RST="\[$(tput sgr0)\]"

_prompt_timings_start() {
    if [ $PROMPT_TIMINGS != 0 ]; then
        local _START_TIME=$(date +%s%N)
        export START_TIME=${_START_TIME:0:13}
    fi
}

_prompt_set_timings() {
    if [ $PROMPT_TIMINGS != 0 ]; then
        local _STOP_TIME=$(date +%s%N)
        local STOP_TIME=${_STOP_TIME:0:13}

        duration=$(($STOP_TIME-$START_TIME))
        export PS1_TIMINGS=" ${ANSI_DGRY}{$duration}${ANSI_RST}"
    else
        export PS1_TIMINGS=""
    fi
}

_prompt_set_git() {
    local _GIT_REPO=0

    local _GIT_BRANCH_LOCAL=""
    local _GIT_BRANCH_REMOTE=""
    local _GIT_BRANCH_BEHIND=0
    local _GIT_BRANCH_AHEAD=0
    local _GIT_BRANCH_CONFLICT=0
    local _GIT_BRANCH_PENDING=0

    local _GIT_FILES_BITMASK=0
    local _GIT_FILES_CHANGED=0
    local _GIT_FILES_CONFLICT=0
    local _GIT_FILES_DELETED=0
    local _GIT_FILES_UNTRACKED=0

    local IFS=$'\n'
    for line in `git status --branch --porcelain 2>/dev/null`; do
        unset IFS
        case $line in
            "fatal: Not a git repository"*)
                break
                ;;
            # branch header
            "## "*)
                _GIT_REPO=1

                local details=(${line})
                if [[ ${details[1]} =~ \.\.\. ]] ; then
                    local branch=(${details[1]/.../ })
                    _GIT_BRANCH_LOCAL=${branch[0]}
                    _GIT_BRANCH_REMOTE=${branch[1]}
                else
                    _GIT_BRANCH_LOCAL=${details[1]}
                fi

                local branch_status_a=${details[@]:2}
                local branch_status=${branch_status_a[*]}

                if [ -n "$branch_status" ]; then
                    branch_status=${branch_status#[}
                    branch_status=${branch_status%]}
                    branch_status=${branch_status/,/}

                    if [[ $branch_status =~ ahead[[:space:]]([0-9]+) ]]; then
                        _GIT_BRANCH_AHEAD=${BASH_REMATCH[1]}
                    fi
                    if [[ $branch_status =~ behind[[:space:]]([0-9]+) ]]; then
                        _GIT_BRANCH_BEHIND=${BASH_REMATCH[1]}
                    fi
                fi
                ;;
            # file modifications
            *)
                details=${line:0:2}
                case ${details[0]} in
                    " M")
                        ((_GIT_FILES_CHANGED++))
                        ((_GIT_FILES_BITMASK|=1))
                        ;;
                    " D")
                        ((_GIT_FILES_DELETED++))
                        ((_GIT_FILES_BITMASK|=2))
                        ;;
                    "D ") ;&
                    "A ") ;&
                    "R ") ;&
                    "M ")
                        _GIT_BRANCH_PENDING=1
                        ;;
                    "RD") ;&
                    "RM") ;&
                    "MM")
                        _GIT_BRANCH_PENDING=1
                        ((_GIT_FILES_CHANGED++))
                        ((_GIT_FILES_BITMASK|=1))
                        ;;
                    "UU")
                        ((_GIT_BRANCH_CONFLICT++))
                        ;;
                    "??")
                        ((_GIT_FILES_UNTRACKED++))
                        ((_GIT_FILES_BITMASK|=4))
                        ;;
                    *)
                        echo "Git Status: Unknown ${details[0]}"
                        ;;
                esac
                ;;
        esac
    done

    if [ $_GIT_REPO -eq 1 ]; then
        PS1_GIT_BRANCH=${_GIT_BRANCH_LOCAL}
        [ -z "$_GIT_BRANCH_REMOTE" ] && PS1_GIT_BRANCH="${ANSI_DRED}//${ANSI_RST}${_GIT_BRANCH_LOCAL}"

        if [ $_GIT_BRANCH_CONFLICT -ne 0 ]; then
            PS1_GIT_BCOL="$ANSI_DRED"
        elif [ $_GIT_BRANCH_BEHIND -ne 0 ] && [ $_GIT_BRANCH_AHEAD -ne 0 ]; then
            PS1_GIT_BCOL="$ANSI_LBLU"
        elif [ $_GIT_BRANCH_BEHIND -ne 0 ]; then
            PS1_GIT_BCOL="$ANSI_DPNK"
        elif [ $_GIT_BRANCH_AHEAD -ne 0 ]; then
            PS1_GIT_BCOL="$ANSI_LYLW"
        else
            PS1_GIT_BCOL="$ANSI_DGRN"
        fi

        PS1_GIT_LEFT="${PS1_GIT_BCOL}(${ANSI_RST}"
        PS1_GIT_RIGHT="${PS1_GIT_BCOL})${ANSI_RST}"

        if [ $((_GIT_FILES_BITMASK & 7)) == 7 ]; then
            PS1_GIT_FILES="${ANSI_DYLW}##${ANSI_RST}"
        elif [ $((_GIT_FILES_BITMASK & 6)) == 6 ]; then
            PS1_GIT_FILES="${ANSI_DYLW}?-${ANSI_RST}"
        elif [ $((_GIT_FILES_BITMASK & 5)) == 5 ]; then
            PS1_GIT_FILES="${ANSI_DYLW}?*${ANSI_RST}"
        elif [ $((_GIT_FILES_BITMASK & 3)) == 3 ]; then
            PS1_GIT_FILES="${ANSI_DYLW}*-${ANSI_RST}"
        elif [ $((_GIT_FILES_BITMASK & 4)) == 4 ]; then
            PS1_GIT_FILES="${ANSI_DYLW}??${ANSI_RST}"
        elif [ $((_GIT_FILES_BITMASK & 2)) == 2 ]; then
            PS1_GIT_FILES="${ANSI_DYLW}--${ANSI_RST}"
        elif [ $((_GIT_FILES_BITMASK & 1)) == 1 ]; then
            PS1_GIT_FILES="${ANSI_DYLW}**${ANSI_RST}"
        else
            PS1_GIT_FILES=""
        fi

        if [ $_GIT_BRANCH_PENDING -ne 0 ]; then
            PS1_GIT_FILES="${PS1_GIT_FILES}${ANSI_DYLW}>>${ANSI_RST}"
        fi

        export PS1_GIT=" ${PS1_GIT_LEFT}${PS1_GIT_BRANCH}${PS1_GIT_FILES}${PS1_GIT_RIGHT}"
    else
        export PS1_GIT=""
    fi
}

# _prompt_set_column()
#   Detects the current terminal column position, saving it to PS1_COLUMN
_prompt_set_column() {
    exec < /dev/tty
    local oldstty=$(stty -g)
    stty raw -echo min 0
    echo -en "\033[6n" > /dev/tty
    local pos
    IFS=';' read -r -d R -a pos
    stty $oldstty
    export PS1_COLUMN=$((${pos[1]} - 1))
}

# _prompt_set()
#    Finalises PS1 prompt, with a newline if required
_prompt_set() {
    if [ $PS1_COLUMN != '0' ]; then
        export PS1="\n${PS1_BASE_LEFT}${PS1_TIMINGS}${PS1_GIT}${PS1_BASE_RIGHT}"
    else
        export PS1="${PS1_BASE_LEFT}${PS1_TIMINGS}${PS1_GIT}${PS1_BASE_RIGHT}"
    fi
}

export PS1_BASE_TITLE="\[\033]0;\u@\h:\W\007\]"
export PS1_BASE_LEFTDIV="${ANSI_DCYN}[${ANSI_RST}"
export PS1_BASE_TIME="${ANSI_WHT}\A${ANSI_RST}"
export PS1_BASE_USER="${ANSI_LGRY}\u@\h${ANSI_RST}"
export PS1_BASE_USERPATHDIV="${ANSI_WHT}:${ANSI_RST}"
export PS1_BASE_PATH="${ANSI_LGRY}\w${ANSI_RST}"
export PS1_BASE_RIGHTDIV="${ANSI_DCYN}]${ANSI_RST}"
export PS1_BASE_PROMPT="${ANSI_LGRY}\$${ANSI_RST}"

export PS1_BASE_LEFT="${PS1_BASE_TITLE}${PS1_BASE_LEFTDIV}${PS1_BASE_TIME} ${PS1_BASE_USER}${PS1_BASE_USERPATHDIV}${PS1_BASE_PATH}"
export PS1_BASE_RIGHT="${PS1_BASE_RIGHTDIV}${PS1_BASE_PROMPT} "

export PROMPT_COMMAND="_prompt_timings_start;_prompt_set_column;_prompt_set_git;_prompt_set_timings;_prompt_set"

## LS COLOURS
##
export LS_COLORS="di=94:ln=96:so=32:pi=33:ex=97:bd=93:cd=93:su=91:sg=91:tw=34"

## History Settings
##
export HISTCONTROL="ignoreboth"
export HISTTIMEFORMAT="%d/%m/%Y %H:%M:%S "

## Path Settings
##
export PATH="$PATH:$HOME/bin"

## Editor Settings
##
export EDITOR="vim"

## Key Bindings
##
# Ctrl-Left and Ctrl-Right
bind '"\e[1;5C": forward-word'
bind '"\e[1;5D": backward-word'
# Unbind Ctrl-S Ctrl-Q
stty stop ''
stty start ''

## Aliases
##
# Enable colours
alias ls='ls --color=auto'
alias grep='grep --color=auto'
# Git
alias gp='git pull'
alias git-prune="git branch --merged | egrep -v '(^\*|master|release)'  |xargs git branch -d"
